{"version":3,"sources":["components/Profile/Profile.jsx","components/Statistics/Statistics.jsx","components/FriendListItem/FriendListItem.jsx","components/FriendList/FriendList.jsx","components/TransactionHistory/TransactionHistory.jsx","App.js","serviceWorker.js","index.js"],"names":["Profile","name","tag","location","avatar","stats","className","src","alt","Object","entries","map","item","key","faker","random","uuid","Statistics","title","style","gridTemplateColumns","length","id","label","percentage","backgroundColor","internet","color","FriendListItem","isOnline","width","FriendList","friends","friend","TransactionHistory","transactions","type","amount","currency","App","user","statistical","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAKaA,G,QAAU,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACrD,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,eACb,yBAAKC,IAAKH,EAAQI,IAAI,cAAcF,UAAU,WAC9C,uBAAGA,UAAU,QAAQL,GACrB,uBAAGK,UAAU,OAAb,IAAqBJ,GACrB,uBAAGI,UAAU,YAAYH,IAG3B,wBAAIG,UAAU,SACXG,OAAOC,QAAQL,GAAOM,KAAI,SAACC,GAAD,OACzB,wBAAIC,IAAKC,IAAMC,OAAOC,QACpB,0BAAMV,UAAU,SAASM,EAAK,IAC9B,0BAAMN,UAAU,YAAYM,EAAK,YCdhCK,G,QAAa,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOb,EAAY,EAAZA,MAClC,OACE,6BAASC,UAAU,cAChBY,EAAQ,wBAAIZ,UAAU,SAASY,GAAc,KAE9C,wBACEZ,UAAU,YACVa,MAAO,CACLC,oBAAoB,UAAD,OAAYf,EAAMgB,OAAlB,YAGpBhB,EAAMM,KAAI,gBAAGW,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,WAAd,OACT,wBACElB,UAAU,OACVO,IAAKS,EACLH,MAAO,CACLM,gBAAiBX,IAAMY,SAASC,UAGlC,0BAAMrB,UAAU,SAASiB,GACzB,0BAAMjB,UAAU,cAAckB,EAA9B,aCrBCI,G,QAAiB,SAAC,GAAgC,IAA9BxB,EAA6B,EAA7BA,OAAQH,EAAqB,EAArBA,KAAM4B,EAAe,EAAfA,SAC7C,OACE,wBAAIvB,UAAU,QACZ,0BAAMA,UAAS,iBAAYuB,EAAW,YAAc,QACpD,yBAAKvB,UAAU,SAASC,IAAKH,EAAQI,IAAI,GAAGsB,MAAM,OAClD,uBAAGxB,UAAU,QAAQL,MCJd8B,G,QAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OACE,wBAAI1B,UAAU,eACX0B,EAAQrB,KAAI,SAACsB,GAAD,OACX,kBAAC,EAAD,eAAgBpB,IAAKoB,EAAOX,IAAQW,UCL/BC,G,QAAqB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnC,OACE,2BAAO7B,UAAU,uBACf,+BACE,4BACE,oCACA,sCACA,0CAIJ,+BACG6B,EAAaxB,KAAI,gBAAGW,EAAH,EAAGA,GAAIc,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,SAArB,OAChB,wBAAIzB,IAAKS,GACP,4BAAKc,GACL,4BAAKC,GACL,4BAAKC,W,4BCTJC,EAAM,WACjB,OACE,oCACE,yBAAKjC,UAAU,aACb,kBAAC,EAAYkC,GACb,kBAAC,EAAD,CAAYtB,MAAO,gBAAiBb,MAAOoC,IAC3C,kBAAC,EAAD,CAAYT,QAASA,IACrB,kBAAC,EAAD,CAAoBG,aAAcA,OCNtBO,QACW,cAA7BC,OAAOxC,SAASyC,UAEe,UAA7BD,OAAOxC,SAASyC,UAEhBD,OAAOxC,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.438cd3b1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport faker from \"faker\";\r\nimport \"./Profile.scss\";\r\n\r\nexport const Profile = ({ name, tag, location, avatar, stats }) => {\r\n  return (\r\n    <div className=\"profile\">\r\n      <div className=\"description\">\r\n        <img src={avatar} alt=\"user avatar\" className=\"avatar\" />\r\n        <p className=\"name\">{name}</p>\r\n        <p className=\"tag\">@{tag}</p>\r\n        <p className=\"location\">{location}</p>\r\n      </div>\r\n\r\n      <ul className=\"stats\">\r\n        {Object.entries(stats).map((item) => (\r\n          <li key={faker.random.uuid()}>\r\n            <span className=\"label\">{item[0]}</span>\r\n            <span className=\"quantity\">{item[1]}</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nProfile.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  tag: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  avatar: PropTypes.string.isRequired,\r\n  stats: PropTypes.object.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport faker from \"faker\";\r\nimport \"./Statistics.scss\";\r\n\r\nexport const Statistics = ({ title, stats }) => {\r\n  return (\r\n    <section className=\"statistics\">\r\n      {title ? <h2 className=\"title\">{title}</h2> : null}\r\n\r\n      <ul\r\n        className=\"stat-list\"\r\n        style={{\r\n          gridTemplateColumns: `repeat(${stats.length}, 1fr)`,\r\n        }}\r\n      >\r\n        {stats.map(({ id, label, percentage }) => (\r\n          <li\r\n            className=\"item\"\r\n            key={id}\r\n            style={{\r\n              backgroundColor: faker.internet.color(),\r\n            }}\r\n          >\r\n            <span className=\"label\">{label}</span>\r\n            <span className=\"percentage\">{percentage}%</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  title: PropTypes.string,\r\n  stats: PropTypes.array.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./FriendListItem.scss\";\r\n\r\nexport const FriendListItem = ({ avatar, name, isOnline }) => {\r\n  return (\r\n    <li className=\"item\">\r\n      <span className={`status ${isOnline ? \"status-on\" : null}`}></span>\r\n      <img className=\"avatar\" src={avatar} alt=\"\" width=\"48\" />\r\n      <p className=\"name\">{name}</p>\r\n    </li>\r\n  );\r\n};\r\n\r\nFriendListItem.propTypes = {\r\n  avatar: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  isOnline: PropTypes.bool.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FriendListItem } from \"../FriendListItem/FriendListItem\";\r\nimport \"./FriendList.scss\";\r\n\r\nexport const FriendList = ({ friends }) => {\r\n  return (\r\n    <ul className=\"friend-list\">\r\n      {friends.map((friend) => (\r\n        <FriendListItem key={friend.id} {...friend} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nFriendList.propTypes = {\r\n  friends: PropTypes.array.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./TransactionHistory.scss\";\r\n\r\nexport const TransactionHistory = ({ transactions }) => {\r\n  return (\r\n    <table className=\"transaction-history\">\r\n      <thead>\r\n        <tr>\r\n          <th>Type</th>\r\n          <th>Amount</th>\r\n          <th>Currency</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {transactions.map(({ id, type, amount, currency }) => (\r\n          <tr key={id}>\r\n            <td>{type}</td>\r\n            <td>{amount}</td>\r\n            <td>{currency}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nTransactionHistory.propTypes = {\r\n  transactions: PropTypes.array.isRequired,\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Profile } from \"./components/Profile/Profile\";\nimport { Statistics } from \"./components/Statistics/Statistics\";\nimport { FriendList } from \"./components/FriendList/FriendList\";\nimport { TransactionHistory } from \"./components/TransactionHistory/TransactionHistory\";\nimport user from \"./user.json\";\nimport statistical from \"./statistical-data.json\";\nimport friends from \"./friends.json\";\nimport transactions from \"./transactions.json\";\n\nexport const App = () => {\n  return (\n    <>\n      <div className=\"container\">\n        <Profile {...user} />\n        <Statistics title={\"uploads stats\"} stats={statistical} />\n        <FriendList friends={friends} />\n        <TransactionHistory transactions={transactions} />\n      </div>\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}