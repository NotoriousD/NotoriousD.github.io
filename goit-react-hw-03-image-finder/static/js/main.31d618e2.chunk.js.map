{"version":3,"sources":["components/SearchBar/SearchBar.jsx","components/ImageGalleryItem/ImageGalleryItem.jsx","components/Modal/Modal.jsx","components/ImageGallery/ImageGallery.jsx","api/pixaby.js","components/ImageFinder/ImageFinder.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","onSubmit","className","type","name","placeholder","ImageGalleryItem","id","webformatURL","onClick","largeImageURL","key","data-src","src","alt","Modal","keyPress","e","code","props","window","addEventListener","this","removeEventListener","Component","ImageGallery","state","isModal","imgSrc","openModal","currentTarget","dataset","setState","closeModal","target","images","map","image","tags","api_key","pixabyAPI","fetchImage","a","page","query","per_page","axios","get","catch","message","response","error","ImageFinder","isLoading","fetchDataFromApi","then","hits","data","console","log","handleSubmit","preventDefault","searchInput","value","prevState","handleLoadMore","prevProps","scrollTo","top","document","documentElement","scrollHeight","behavior","color","height","width","length","disabled","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31d618e2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./SearchBar.scss\";\r\n\r\nconst SearchBar = ({ onSubmit }) => {\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form onSubmit={onSubmit} className=\"SearchForm\">\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          name=\"searchInput\"\r\n          placeholder=\"Search images and photos\"\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./ImageGalleryItem.scss\";\r\n\r\nconst ImageGalleryItem = ({ id, webformatURL, onClick, largeImageURL }) => {\r\n  return (\r\n    <li\r\n      key={id}\r\n      data-src={largeImageURL}\r\n      onClick={onClick}\r\n      className=\"ImageGalleryItem\"\r\n    >\r\n      <img src={webformatURL} alt=\"\" className=\"ImageGalleryItem-image\" />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import React, { Component } from \"react\";\r\nimport \"./Modal.scss\";\r\n\r\nexport default class Modal extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", this.keyPress);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"keydown\", this.keyPress);\r\n  }\r\n\r\n  keyPress = (e) => {\r\n    if (e.code === \"Escape\") {\r\n      this.props.onClick();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { src, alt, onClick } = this.props;\r\n    return (\r\n      <div className=\"Overlay\" onClick={onClick}>\r\n        <div className=\"Modal\">\r\n          <img src={src} alt={alt} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ImageGalleryItem from \"../ImageGalleryItem/ImageGalleryItem\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport \"./ImageGallery.scss\";\r\n\r\nclass ImageGallery extends Component {\r\n  state = {\r\n    isModal: false,\r\n    imgSrc: \"\",\r\n  };\r\n\r\n  openModal = (e) => {\r\n    const largeImageURL = e.currentTarget.dataset.src;\r\n    this.setState({ imgSrc: largeImageURL, isModal: true });\r\n  };\r\n\r\n  closeModal = (e) => {\r\n    if (e.currentTarget === e.target) {\r\n      this.setState({ isModal: false });\r\n    }\r\n  };\r\n  render() {\r\n    const { isModal, imgSrc } = this.state;\r\n    const { images } = this.props;\r\n    return (\r\n      <ul className=\"ImageGallery\">\r\n        {images.map((image) => (\r\n          <ImageGalleryItem\r\n            key={image.id}\r\n            {...image}\r\n            onClick={this.openModal}\r\n          />\r\n        ))}\r\n        {isModal && (\r\n          <Modal src={imgSrc} alt={images.tags} onClick={this.closeModal} />\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.array,\r\n};\r\n\r\nexport default ImageGallery;\r\n","import axios from \"axios\";\r\n\r\nconst api_key = `17331667-9320cee158cc14c7426ffb052`;\r\nconst base_url = `https://pixabay.com/api/`;\r\n\r\nconst fetchImage = async (page = 1, query, per_page = 12) => {\r\n  try {\r\n    const response = await axios\r\n      .get(\r\n        `${base_url}?q=${query}&key=${api_key}&image_type=photo&orientation=horizontal&page=${page}&per_page=${per_page}`\r\n      )\r\n      .catch((e) => {\r\n        throw e.message;\r\n      });\r\n    return response;\r\n  } catch (error) {\r\n    return { error };\r\n  }\r\n};\r\n\r\nconst pixabyAPI = {\r\n  fetchImage,\r\n};\r\n\r\nexport default pixabyAPI;\r\n","import React, { Component } from \"react\";\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport ImageGallery from \"../ImageGallery/ImageGallery\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { pixabyAPI } from \"../../api\";\r\n\r\nexport default class ImageFinder extends Component {\r\n  state = {\r\n    images: [],\r\n    isLoading: false,\r\n    page: 1,\r\n    query: \"\",\r\n  };\r\n\r\n  fetchDataFromApi = () => {\r\n    const { images, page, query } = this.state;\r\n    this.setState({ isLoading: true });\r\n    pixabyAPI\r\n      .fetchImage(page, query)\r\n      .then(({ data: { hits } }) => {\r\n        this.setState({\r\n          images: [...images, ...hits],\r\n          isLoading: false,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { query, page, isLoading } = this.state;\r\n    if (prevState.query !== query || prevState.page !== page) {\r\n      this.setState({\r\n        isLoading: true,\r\n      });\r\n      this.fetchDataFromApi();\r\n    }\r\n    if (prevState.isLoading && !isLoading) {\r\n      window.scrollTo({\r\n        top: document.documentElement.scrollHeight,\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const query = e.target.searchInput.value;\r\n    this.setState((prevState) => {\r\n      if (prevState.query !== query) {\r\n        return {\r\n          images: [],\r\n          page: 1,\r\n          query: query,\r\n        };\r\n      } else {\r\n        return {\r\n          page: prevState.page + 1,\r\n        };\r\n      }\r\n    });\r\n  };\r\n\r\n  handleLoadMore = () => {\r\n    this.setState(({ page }) => ({\r\n      page: page + 1,\r\n    }));\r\n    console.log(this.state);\r\n  };\r\n\r\n  render() {\r\n    const { images, isLoading } = this.state;\r\n    return (\r\n      <>\r\n        <SearchBar onSubmit={this.handleSubmit} />\r\n        <ImageGallery images={images} />\r\n        {isLoading && (\r\n          <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\r\n        )}\r\n        {images.length !== 0 && (\r\n          <button disabled={isLoading} onClick={this.handleLoadMore}>\r\n            load more\r\n          </button>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ImageFinder from \"./components/ImageFinder/ImageFinder\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ImageFinder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}