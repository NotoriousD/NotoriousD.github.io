{"version":3,"sources":["components/ContactList/contactlist.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Phonebook/Phonebook.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleOnChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","this","className","htmlFor","type","id","onChange","Component","ContactList","contacts","onDelete","map","CSSTransition","key","timeout","classNames","styles","onClick","Filter","onFilter","Phonebook","filter","getLocalStorageContact","currentData","JSON","parse","localStorage","getItem","length","person","contact","toLowerCase","includes","alert","faker","random","uuid","setItem","stringify","getFilteredContacts","onSearchContact","filteredNames","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0ac2bfa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contactlist_list__3S9wi\",\"wrapper\":\"contactlist_wrapper__1rp-Q\",\"closeBtn\":\"contactlist_closeBtn__2vdMx\",\"telNumber\":\"contactlist_telNumber__Bj7eK\",\"enter\":\"contactlist_enter__1aJDc\",\"enterActive\":\"contactlist_enterActive__3j0la\",\"exit\":\"contactlist_exit__--vnU\",\"exitActive\":\"contactlist_exitActive__26__q\"};","import React, { Component } from \"react\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleOnChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n  };\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <div className=\"add-form\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"contact\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"contact\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.handleOnChange}\r\n          />\r\n          <label htmlFor=\"number\">Number</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"number\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={this.handleOnChange}\r\n          />\r\n          <input type=\"submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport styles from \"./contactlist.module.css\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nconst ContactList = ({ contacts, onDelete }) => (\r\n  <ul className=\"list\">\r\n    {contacts.map(({ id, name, number }) => (\r\n      <CSSTransition key={id} timeout={250} classNames={styles}>\r\n        <li key={id}>\r\n          <div className=\"contact\">\r\n            <span>\r\n              {name}: {number}\r\n            </span>\r\n            <button className=\"delete\" id={id} onClick={onDelete}>\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </li>\r\n      </CSSTransition>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\n\r\nconst Filter = ({ onFilter }) => (\r\n  <>\r\n    <p>Find contacts by name</p>\r\n    <input type=\"text\" name=\"filter\" onChange={onFilter} />\r\n  </>\r\n);\r\n\r\nexport default Filter;\r\n","import React, { Component } from \"react\";\r\nimport faker from \"faker\";\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport ContactList from \"../ContactList/ContactList\";\r\nimport Filter from \"../Filter/Filter\";\r\nimport \"./Phonebook.scss\";\r\n\r\nexport default class Phonebook extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: \"\",\r\n  };\r\n\r\n  getLocalStorageContact = () => {\r\n    const currentData = JSON.parse(localStorage.getItem(\"contacts\"));\r\n    if (!!currentData && currentData.length > 0) {\r\n      this.setState({\r\n        contacts: [...currentData],\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getLocalStorageContact();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n  }\r\n\r\n  handleSubmit = (person) => {\r\n    const { contacts } = this.state;\r\n    const currentContacts = contacts.map((contact) =>\r\n      contact.name.toLowerCase()\r\n    );\r\n    if (!currentContacts.includes(person.name.toLowerCase())) {\r\n      this.setState({\r\n        contacts: [\r\n          ...this.state.contacts,\r\n          {\r\n            id: faker.random.uuid(),\r\n            ...person,\r\n          },\r\n        ],\r\n      });\r\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n    } else {\r\n      alert(`${person.name} is already in contacts`);\r\n    }\r\n  };\r\n\r\n  getFilteredContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n    return filter\r\n      ? contacts.filter((contact) =>\r\n          contact.name.toLowerCase().includes(filter.toLowerCase())\r\n        )\r\n      : contacts;\r\n  };\r\n\r\n  onSearchContact = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      filter: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const filteredNames = this.getFilteredContacts();\r\n    console.log(`filtered`, filteredNames);\r\n    return (\r\n      <div className=\"content\">\r\n        <h1>Phonebook</h1>\r\n        <ContactForm onSubmit={this.handleSubmit} />\r\n        <h2>Contacts</h2>\r\n        <Filter onFilter={this.onSearchContact} />\r\n        <ContactList contacts={filteredNames} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Phonebook from \"./components/Phonebook/Phonebook\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <Phonebook />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}