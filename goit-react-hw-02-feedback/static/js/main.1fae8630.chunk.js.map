{"version":3,"sources":["components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","App.js","serviceWorker.js","index.js"],"names":["Section","props","title","children","Statistics","this","good","neutral","bad","total","positivePercentage","className","Component","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","item","key","faker","random","uuid","type","onClick","value","Notification","message","App","state","countTotalFeedback","values","reduce","acc","countPositiveFeedbackPercentage","Math","ceil","handleIncrement","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kSAEaA,EAAU,SAACC,GACpB,OACI,6BACI,4BAAKA,EAAMC,OACVD,EAAME,WCJEC,E,uKACP,IAAD,EACmDC,KAAKJ,MAAtDK,EADF,EACEA,KAAMC,EADR,EACQA,QAASC,EADjB,EACiBA,IAAKC,EADtB,EACsBA,MAAOC,EAD7B,EAC6BA,mBAClC,OACI,yBAAKC,UAAU,SACX,0BAAMA,UAAU,SAAhB,SAA+BL,GAC/B,0BAAMK,UAAU,SAAhB,YAAkCJ,GAClC,0BAAMI,UAAU,SAAhB,QAA8BH,GAC9B,0BAAMG,UAAU,SAAhB,UAAgCF,GAChC,0BAAME,UAAU,SAAhB,sBAA4CD,EAA5C,U,GATwBE,a,gBCCnBC,E,uKACP,IAAD,EAC8BR,KAAKJ,MAAjCa,EADF,EACEA,QAASC,EADX,EACWA,gBAChB,OACI,yBAAKJ,UAAU,WACVK,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAI,OAC5B,2BAAOC,IAAKC,IAAMC,OAAOC,OAAQC,KAAK,SAASC,QAAS,WACtDV,EAAgBI,IACfO,MAAOP,Y,GARiBP,aCD9B,SAASe,EAAT,GAAkC,IAAXC,EAAU,EAAVA,QAClC,OACI,6BACI,2BAAIA,I,YCiDDC,E,4MA9CbC,MAAQ,CACNxB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPuB,mBAAqB,WACnB,OAAOf,OAAOgB,OAAO,EAAKF,OAAOG,QAAO,SAACC,EAAKR,GAE5C,OADAQ,GAAOR,IAEN,I,EAGLS,gCAAkC,WAChC,OAAuB,IAApB,EAAKL,MAAMxB,KACL8B,KAAKC,KAAsB,IAAhB,EAAKP,MAAMxB,KAAU,EAAKyB,sBAErC,G,EAKXO,gBAAkB,SAACZ,GACjB,EAAKa,SAAL,eAAgBb,EAAQ,EAAKI,MAAMJ,GAAS,IAC5C,EAAKK,sB,uDAIG,IAAD,EACsB1B,KAAKyB,MAA3BxB,EADA,EACAA,KAAMC,EADN,EACMA,QAASC,EADf,EACeA,IACpB,OACE,oCACE,kBAAC,EAAD,CAASN,MAAM,yBACb,kBAAC,EAAD,CAAiBY,QAAST,KAAKyB,MAAOf,gBAAiBV,KAAKiC,mBAE7DjC,KAAK8B,kCACJ,kBAAC,EAAD,CAASjC,MAAM,cACb,kBAAC,EAAD,CAAYI,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOJ,KAAK0B,qBAAsBrB,mBAAoBL,KAAK8B,qCAE/G,kBAACR,EAAD,CAAcC,QAAQ,2B,GAxClBhB,aCKE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7B,a","file":"static/js/main.1fae8630.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Section = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>{props.title}</h2>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Statistics extends Component {\r\n    render() {\r\n        const {good, neutral, bad, total, positivePercentage} = this.props\r\n        return (\r\n            <div className=\"stats\">\r\n                <span className=\"block\">Good: {good}</span>\r\n                <span className=\"block\">Neutral: {neutral}</span>\r\n                <span className=\"block\">bad: {bad}</span>\r\n                <span className=\"block\">Total: {total}</span>\r\n                <span className=\"block\">Positive feedback: {positivePercentage}%</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport faker from 'faker'\r\n\r\nexport default class FeedbackOptions extends Component {\r\n    render() {\r\n        const {options, onLeaveFeedback} = this.props\r\n        return (\r\n            <div className=\"buttons\">\r\n                {Object.keys(options).map(item => (\r\n                  <input key={faker.random.uuid()} type=\"button\" onClick={() => {\r\n                    onLeaveFeedback(item)\r\n                  }} value={item}/>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Notification({message}) {\r\n    return (\r\n        <div>\r\n            <p>{message}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react';\nimport {Section} from './components/Section/Section'\nimport Statistics from './components/Statistics/Statistics'\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions'\nimport Notification from './components/Notification/Notification'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, value) => {\n      acc += value\n      return acc\n    }, 0)\n  }\n\n  countPositiveFeedbackPercentage = () => {\n    if(this.state.good !== 0){\n      return Math.ceil((this.state.good*100)/this.countTotalFeedback())\n    }else{\n      return 0\n    }\n    \n  }\n\n  handleIncrement = (value) => {\n    this.setState({[value]: this.state[value] + 1})\n    this.countTotalFeedback()\n  }\n\n  \n  render() {\n    const {good, neutral, bad} = this.state\n      return (\n        <>\n          <Section title=\"Please leave feedback\">\n            <FeedbackOptions options={this.state} onLeaveFeedback={this.handleIncrement} />\n          </Section>\n          {this.countPositiveFeedbackPercentage() ? (\n            <Section title=\"Statistics\">\n              <Statistics good={good} neutral={neutral} bad={bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()} />\n            </Section>\n          ) : <Notification message='No feedback given' />}\n          \n        </>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}